#
# bashmount.conf
#

# Place in /etc/bashmount.conf for system wide configuration.
# Place in ~/.config/bashmount/config for per-user configuration.
# XDG_CONFIG_HOME is respected if it has been set.

# Set which sections to show in the output. These can be '0' or '1'.
show_internal='1'
show_removable='1'
show_optical='1'
show_commands='1'

# Set whether to colourize the output. This can be '0' or '1'.
colourize='1'

# Configure the backend to use when performing the "mount" command.
# The device path /dev/sdx is passed as first argument.
# The default is to ask the user for the desired mountpoint.
# Do not forget to change the unmount command as well.

# Uncomment this example for udisks2.
#mount_command() {
#	udisksctl mount ${mount_options} --block-device "$1"
#}
#unmount_command() {
#	udisksctl unmount --block-device "$1"
#}

# A simple example.
#mount_command() {
#	mount ${mount_options} "$1" /mnt
#}
#unmount_command() {
#	umount "$1"
#}

# Set devices to blacklist. Any device whose "lsblk -P" output contains a string
# listed here will be hidden. The following key-value-pairs are printed by lsblk:
# NAME,FSTYPE,LABEL,MOUNTPOINT,PARTLABEL
# The strings are matched using "grep -E".
blacklist=()

###
### This example will match any device with "Photosmart" in any field.
### blacklist+=( 'Photosmart' )
###
### This example will match the device found at /dev/sda.
### blacklist+=( 'NAME="sda"' )
###
### This example matches several different devices. Note that the array can be
### split over multiple lines for convenience.
### blacklist+=( 'FSTYPE="ext3"' )
### blacklist+=( 'LABEL="secret"' 'PARTLABEL="secret"' )
### blacklist+=( 'MOUNTPOINT="/"' )
###

# Set default mount options.
mount_options='--options nosuid,noexec,noatime'

# Set whether to show the device filename in the menu. These can be '0' or '1'.
# Example: If this is set to '1' then the menu entry will show "sdb1: cruzer",
# while if this is set to '0' then the menu entry will only show "cruzer". This
# might be confusing, as they will still be sorted by device filename not label.
show_device_path='1'

# Set filemanager command to use when performing the "open" command. The mount
# point is passed as the first argument. The default is to open the directory
# within your terminal.

# Uncomment this example to launch a graphical file manager.
#filemanager() {
#	/usr/bin/nautilus "$1" & >/dev/null 2>&1
#}

# Uncomment this example to launch midnight commander in a new window.
#filemanager() {
#	/usr/bin/uxterm -wf -e /usr/bin/mc "$1" & >/dev/null 2>&1
#}

# Set custom commands. Set "customX_show" to '0' to disable or '1' to enable.
# If enabled, the custom commands will be shown in the device sub-menu. The
# description and command functions can be set to anything you desire. The
# device name (e.g. /dev/sdb1) is passed as the first and only argument.
# A maximum of 6 custom actions are configurable.
custom1_show='0'
custom1_desc='read-only'
custom1_command() {
	mount --options ro "$1" /mnt
}

custom2_show='0'
custom2_desc='luksOpen'
custom2_command() {
	cryptsetup open --type=luks "$1" container
}

custom3_show='0'
custom3_desc='luksClose'
custom3_command() {
	cryptsetup close container
}

#custom4_show='0'
#custom4_desc=''
#custom4_command() {
#
#}

#custom5_show='0'
#custom5_desc=''
#custom5_command() {
#
#}

#custom6_show='0'
#custom6_desc=''
#custom6_command() {
#
#}

# Set custom commands to be run automatically after mounting or unmounting.
# This is useful for spinning down a hard drive after unmounting it. The
# device name (e.g. /dev/sdb1) is passed as the first and only argument.
# Uncomment the examples below, or modify them to pass any arbitrary commands.
# post_mount is run immediately after a successful mount operation, and
# post_unmount is run immediately after a successful unmount operation.

# Set "run_post_mount" to '0' to disable or '1' to enable.
run_post_mount='0'

# This example uses udisks to set the spindown timeout after mounting.
#post_mount() {
#   printf '\n'; msg 'Setting spindown timeout ...'
#   udisks --set-spindown "$1" --spindown-timeout 240
#}

# Set "run_post_unmount" to '0' to disable or '1' to enable.
run_post_unmount='0'

# This example uses hd-idle to spin down the device after unmounting, but only
# if it is the only remaining mounted partition on the device.
#post_unmount() {
#	if ( ! mount | grep -q "^${1%%[0-9]*}" ); then
#		printf '\n'; msg 'Spinning down device ...'
#		dev=${1#/dev/}
#		hd-idle -t ${dev%%[0-9]*}
#	fi
#}
